--- sipdate.c.orig	2021-08-12 20:53:12.124815491 +0000
+++ sipdate.c	2021-08-12 21:01:43.177546769 +0000
@@ -7,11 +7,20 @@
 #include <linux/netfilter.h>		/* for NF_ACCEPT */
 #include <linux/netfilter/nfnetlink_queue.h>
 #include <errno.h>
+#include <linux/ip.h>
+#include <linux/udp.h>
+#include <arpa/inet.h>
+#include <time.h>
+//#include <string.h>
 
 #include <libnetfilter_queue/libnetfilter_queue.h>
+#include <libnetfilter_queue/libnetfilter_queue_udp.h>
+#include <libnetfilter_queue/libnetfilter_queue_ipv4.h>
+#include <libnetfilter_queue/pktbuff.h>
+#include "internal.h"
 
-/* returns packet id */
-static uint32_t print_pkt (struct nfq_data *tb)
+static int cb(struct nfq_q_handle *qh, struct nfgenmsg *nfmsg,
+		struct nfq_data *nfa, void *cbdata)
 {
 	int id = 0;
 	struct nfqnl_msg_packet_hdr *ph;
@@ -19,69 +28,150 @@ static uint32_t print_pkt (struct nfq_da
 	uint32_t mark, ifi, uid, gid;
 	int ret;
 	unsigned char *data, *secdata;
+	time_t rawtime;
+	struct tm * timeinfo;
+	char buffer [80];
+	int status;
 
-	ph = nfq_get_msg_packet_hdr(tb);
+	ph = nfq_get_msg_packet_hdr(nfa);
 	if (ph) {
 		id = ntohl(ph->packet_id);
 		printf("hw_protocol=0x%04x hook=%u id=%u ",
 			ntohs(ph->hw_protocol), ph->hook, id);
 	}
 
-	hwph = nfq_get_packet_hw(tb);
+	hwph = nfq_get_packet_hw(nfa);
 	if (hwph) {
 		int i, hlen = ntohs(hwph->hw_addrlen);
-
 		printf("hw_src_addr=");
 		for (i = 0; i < hlen-1; i++)
 			printf("%02x:", hwph->hw_addr[i]);
 		printf("%02x ", hwph->hw_addr[hlen-1]);
 	}
 
-	mark = nfq_get_nfmark(tb);
+	mark = nfq_get_nfmark(nfa);
 	if (mark)
 		printf("mark=%u ", mark);
 
-	ifi = nfq_get_indev(tb);
+	ifi = nfq_get_indev(nfa);
 	if (ifi)
 		printf("indev=%u ", ifi);
 
-	ifi = nfq_get_outdev(tb);
+	ifi = nfq_get_outdev(nfa);
 	if (ifi)
 		printf("outdev=%u ", ifi);
-	ifi = nfq_get_physindev(tb);
+	ifi = nfq_get_physindev(nfa);
 	if (ifi)
 		printf("physindev=%u ", ifi);
 
-	ifi = nfq_get_physoutdev(tb);
+	ifi = nfq_get_physoutdev(nfa);
 	if (ifi)
 		printf("physoutdev=%u ", ifi);
 
-	if (nfq_get_uid(tb, &uid))
+	if (nfq_get_uid(nfa, &uid))
 		printf("uid=%u ", uid);
 
-	if (nfq_get_gid(tb, &gid))
+	if (nfq_get_gid(nfa, &gid))
 		printf("gid=%u ", gid);
 
-	ret = nfq_get_secctx(tb, &secdata);
+	ret = nfq_get_secctx(nfa, &secdata);
 	if (ret > 0)
 		printf("secctx=\"%.*s\" ", ret, secdata);
 
-	ret = nfq_get_payload(tb, &data);
+	ret = nfq_get_payload(nfa, &data);
 	if (ret >= 0)
 		printf("payload_len=%d ", ret);
 
 	fputc('\n', stdout);
 
-	return id;
-}
-	
+	struct iphdr *iph = ((struct iphdr *) data);
 
-static int cb(struct nfq_q_handle *qh, struct nfgenmsg *nfmsg,
-	      struct nfq_data *nfa, void *data)
-{
-	uint32_t id = print_pkt(nfa);
-	printf("entering callback\n");
-	return nfq_set_verdict(qh, id, NF_ACCEPT, 0, NULL);
+	fprintf(stdout, "IP{v=%u; ihl=%u; tos=%u; tot_len=%u; id=%u; ttl=%u; protocol=%u; "
+		,iph->version, iph->ihl*4, iph->tos, ntohs(iph->tot_len), ntohs(iph->id), iph->ttl, iph->protocol);
+
+	char *saddr = inet_ntoa(*(struct in_addr *)&iph->saddr);
+	fprintf(stdout,"saddr=%s; ",saddr);
+
+	char *daddr = inet_ntoa(*(struct in_addr *)&iph->daddr);
+	fprintf(stdout,"daddr=%s}\n",daddr);
+
+	if(iph->protocol != 17){ // udp
+		printf("not UDP, forward unchanged packet\n");
+		return nfq_set_verdict(qh, id, NF_ACCEPT, 0, NULL);
+	}
+
+	struct udphdr *udp = ((struct udphdr *) (data + (iph->ihl << 2)));
+	fprintf(stdout,"UDP{sport=%u; dport=%u; len=%u}\n",
+	ntohs(udp->source), ntohs(udp->dest), ntohs(udp->len));
+
+	printf("data:\n");
+	int i;
+	for (i = (iph->ihl << 2) + sizeof(struct udphdr); i < ret; i++)
+		printf("%c", data[i]);
+
+	char search[] = "SIP/2.0 200 OK"; // 14
+
+	int dontInsert = 0;
+	for(i = 0; i < 14; i++) {
+		if(search[i] != data[(iph->ihl << 2) + sizeof(struct udphdr) + i])
+			dontInsert = 1;
+	}
+
+	//char *searchStart = strstr((char*)data + (iph->ihl << 2) + sizeof(struct udphdr), search);
+
+	if(!dontInsert){ // oder if(searchStart)
+		time (&rawtime);
+		timeinfo = gmtime (&rawtime);
+		strftime (buffer,80,"\r\nDate: %a, %d %b %Y %H:%M:%S GMT",timeinfo); // 37
+
+		pkt_buff *pkBuff = pktb_alloc(AF_INET, data, ret, 37) ;
+		if (pkBuff == NULL)
+		printf("can't alloc pkt_buff");
+
+		if(!nfq_udp_mangle_ipv4(pkBuff, 14, 0, buffer, 37)) // sizeof(search)? match_offset=searchStart - (char*)data - (iph->ihl << 2) - sizeof(struct udphdr)? sizeof(buffer)?
+			printf("can't mangle\n");
+
+		struct iphdr *iphn = nfq_ip_get_hdr(pkBuff);
+		if(!iphn){
+			printf("invalid new ip hdr\n");
+		} else {
+		fprintf(stdout, "new IP{v=%u; ihl=%u; tos=%u; tot_len=%u; id=%u; ttl=%u; protocol=%u; "
+			,iphn->version, iphn->ihl*4, iphn->tos, ntohs(iphn->tot_len), ntohs(iphn->id), iphn->ttl, iphn->protocol);
+		}
+
+		char *saddr = inet_ntoa(*(struct in_addr *)&iphn->saddr);
+		fprintf(stdout,"saddr=%s; ",saddr);
+
+		char *daddr = inet_ntoa(*(struct in_addr *)&iphn->daddr);
+		fprintf(stdout,"daddr=%s}\n",daddr);
+
+		if(iphn->protocol != 17){
+			printf("not UDP\n");
+		} else {
+			struct udphdr *udphn = ((struct udphdr *) (pktb_data(pkBuff) + (iph->ihl << 2)));
+			if(!udphn){
+				printf("invalid new udp hdr\n\n");
+			} else {
+				fprintf(stdout,"new UDP{sport=%u; dport=%u; len=%u}\n",
+				ntohs(udphn->source), ntohs(udphn->dest), ntohs(udphn->len));
+			}
+		}
+
+		printf("new data:\n");
+		for (i = (iph->ihl << 2) + sizeof(struct udphdr); i < ret + 37; i++)
+			printf("%c", pktb_data(pkBuff)[i]);
+
+		printf("forward changed packet with date string inserted\n\n\n");
+		status = nfq_set_verdict(qh, id, NF_ACCEPT, pktb_len(pkBuff), pktb_data(pkBuff));
+		pktb_free(pkBuff);
+	} else {
+		printf("forward unchanged packet\n\n\n");
+		status = nfq_set_verdict(qh, id, NF_ACCEPT, 0, NULL);
+	}
+
+	if(status < 0)
+		printf("can't set verdict\n");
+	return status;
 }
 
 int main(int argc, char **argv)
